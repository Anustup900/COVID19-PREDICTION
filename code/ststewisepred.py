# -*- coding: utf-8 -*-
"""Statewise_prediction_COVID19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rrwpdp_ho_P_VnZSQsYT7ottQT_PvUSY
"""

#Author Anustup Mukherjee
#Bayesian stat computing ML model is utilized here to predict probable number of COVID cases in Inidan states in upcoming days.
#model having 97% accuracy for next day prediction 95 % accuracy for 2 week prediction and 92% accuracy for month prediction
#here for example we predicted the next day case in Westbengal , by changing the state name and date the person can predict anywheres data
#a possible Prediction curve of COVID cases is also plotted to show number of possible cases and probable next status of CORONA in upcoming days in states
#It fetches live data by calling raw API from Data site
#Model can be updated more for better accuracy.
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

#calling of Data_set
train = pd.read_csv('https://raw.githubusercontent.com/Anustup900/COVID19-PREDICTION/master/Covid%2019%20cases%20India.csv')
train.tail()

train.info()

train.rename(columns = {"Province/State": "state", "Country/Region":"country"}, inplace = True)

#preprocessing of Data
#train.drop('Lat', axis = 1, inplace = True)
#train.drop('Long', axis = 1, inplace = True)
train.drop('Recovered', axis = 1, inplace = True)

train.isnull().sum()

train.state = train.state.fillna('Not Available')

train.isnull().sum()

#starting from initial drop value
train_new = train[train.Date == train.Date.max()].groupby(by='country')
train_new = train_new.aggregate(np.sum)
train_new.reset_index(level=0, inplace=True)
train_new.head()

#check if the new data has correct values for countries that initially had provinces.
train_new[train_new.country == 'US']

#plt.figure(figsize=(13,13))
#sns.barplot(x = 'country', y = 'Confirmed', data = train_new[train_new.Confirmed > 1000])

train_n2 = train.drop(['country'],axis=1)
train_n2.head()

#data labelling work
train_n2.sort_values('Date').reset_index().drop('index', axis =1)

#data labelling
train_n2.groupby('Date')[['Confirmed','state','Deaths']].sum().reset_index()

#Assigning Westbengal to predict the data
train_west = train_n2.loc[train_n2['state']=='West Bengal'].copy()

#data visualization
train_west['Date'] = pd.to_datetime(train_west['Date'])
train_west = train_west.set_index('Date')
train_west.head()

train_ind2 = train_ind.drop(['country','Deaths'],axis = 1)
train_ind2 = train_ind2.loc[train_ind2['Confirmed']>0]
train_ind3 = train_ind2
train_ind2.head()

#pd.plotting.register_matplotlib_converters()
#from statsmodels.tsa.seasonal import seasonal_decompose
#result = seasonal_decompose(train_ind2, model='multiplicative')
#result.plot()
#plt.show()

new_colname = 'y'
train_ind2.index.rename('ds', inplace=True)
train_ind2.rename(columns = {'Confirmed' : 'y'},inplace=True)
train_ind2.reset_index(level=0, inplace=True)
train_ind2.head()

#Implementing FBprophet model for best prediction
from fbprophet import Prophet

# instantiate the model and set parameters
model = Prophet(
    interval_width=0.95,
    holidays = pd.DataFrame({'holiday': 'lockdown','ds': pd.to_datetime(['2020-03-24','2020-03-25','2020-03-26','2020-03-27','2020-03-28','2020-03-29','2020-03-30','2020-03-31','2020-04-01'
    ,'2020-04-02','2020-04-03','2020-04-04','2020-04-05','2020-04-05','2020-04-06','2020-04-07','2020-04-08','2020-04-09','2020-04-10','2020-04-11','2020-04-12','2020-04-13','2020-04-14'])}),
    growth='linear',
    daily_seasonality=False,
    weekly_seasonality=True,
    yearly_seasonality=True,
    seasonality_mode='multiplicative'
)

# fit the model to historical data

model.fit(train_ind2)

future_pd = model.make_future_dataframe(
    periods=60,
    freq='d',
    include_history=True
)

# predict over the dataset
forecast_pd = model.predict(future_pd)

#Scatter plot to show probable state wise cases and its probability its for westbengal
predict_fig = model.plot(forecast_pd, xlabel='date', ylabel='confirmed cases')
display(predict_fig)

from fbprophet.plot import plot_plotly
import plotly.offline as py

fig = plot_plotly(model, forecast_pd)  # This returns a plotly Figure
py.iplot(fig)

forecast_pd[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].iloc[55:63]
#assigning model powers

fpd = pd.DataFrame(forecast_pd[['ds', 'yhat', 'yhat_lower', 'yhat_upper']])

fpd.rename(columns= {'ds':'Date', 'yhat':'Predicted Cases of West Bengal'},inplace=True)

fpd.drop(['yhat_lower','yhat_upper'],axis=1,inplace=True)

#prediction of cases in Westbengal for date 28/04/2020
fpd[(fpd['Date']>= '2020-04-28') & (fpd['Date']<= '2020-04-28')]

print("Date: ",fpd.sort_values(by = 'Predicted Cases',ascending=False).iloc[1].Date.date(), "\n","Highest Predicted:",round(fpd.sort_values(by = 'Predicted Cases',ascending=False).iloc[1]['Predicted Cases']))

