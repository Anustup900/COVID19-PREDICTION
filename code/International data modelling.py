# -*- coding: utf-8 -*-
"""INTERNATIONAL DATA MODELLING AND PRED.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fHO-nBzHI9kqDx5gI4inc9vYSOxoKFtS
"""

#Author Anustup Mukherjee
#This is rpy2 that is R in python embeded script working on live data fetching from John Hoppkins University updated site
#It works by creating a Docker container with Jupyter+python+R+spark+h20.io package
#Its working on a Korean Sattistical Algorithm Kalman Filter working on a ML model
#it predicts and visualizes COVID19 cases world wide day-to-day simply run the script with said container
#The same can be utilized by sate wise Country prediction too
#Accuracy best for week and 1 day predictions with 96%
from google.colab import drive
drive.mount('/content/drive')

#loading of data
import numpy as np
from math import sqrt
from sklearn.metrics import mean_squared_error
import pandas as pd
import seaborn as sns
from datetime import datetime
import matplotlib.pyplot as plt

#url = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv'
#url ='https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv&filename=time_series_covid19_confirmed_global.csv'
#confirmed = pd.read_csv(url, error_bad_lines=False)
#url = 'https://data.humdata.org/hxlproxy/api/data-preview.csv?url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_deaths_global.csv&filename=time_series_covid19_deaths_global.csv'
#death = pd.read_csv(url, error_bad_lines=False)
url = 'https://raw.githubusercontent.com/Anustup900/COVID19-PREDICTION/master/Covid%2019%20cases%20India.csv'
train = pd.read_csv(url, error_bad_lines=False)

# fix region names
#confirmed['Country/Region']= confirmed['Country/Region'].str.replace("Mainland China", "China")
#confirmed['Country/Region']= confirmed['Country/Region'].str.replace("US", "Unites States")
#death['Country/Region']= death['Country/Region'].str.replace("Mainland China", "China")
#death['Country/Region']= death['Country/Region'].str.replace("US", "Unites States")
#recover['Country/Region']= recover['Country/Region'].str.replace("Mainland China", "China")
#recover['Country/Region']= recover['Country/Region'].str.replace("US", "Unites States")

train.rename(columns = {"Province/State": "state", "Country/Region":"country"}, inplace = True)
#train.drop('Lat', axis = 1, inplace = True)
#train.drop('Long', axis = 1, inplace = True)
train.drop('Recovered', axis = 1, inplace = True)

train.isnull().sum()

train.state = train.state.fillna('Not Available')

train.isnull().sum()

train

#Training the model on world population stat to give predictions
population=pd.read_csv('https://raw.githubusercontent.com/Rank23/COVID19/master/population.csv', sep=',', encoding='latin1') 
confirmed=pd.merge(confirmed, population,how='left' ,on=['Province/State','Country/Region'])
death=pd.merge(death, population,how='left' ,on=['Province/State','Country/Region'])
recover=pd.merge(recover, population,how='left' ,on=['Province/State','Country/Region'])

confirmed['region']=confirmed['Country/Region'].map(str)+'_'+confirmed['Province/State'].map(str)
death['region']=death['Country/Region'].map(str)+'_'+death['Province/State'].map(str)
recover['region']=recover['Country/Region'].map(str)+'_'+recover['Province/State'].map(str)
confirmed.iloc[:5,:]

#creating timeseries script 
def create_tm(df):
  tm=df
  tm=tm.drop(['Province/State', 'Country/Region'], axis=1)
  tm.set_index('region')
  tm=tm.T
  tm.columns=tm.loc['region']
  tm=tm.drop('region')
  tm=tm.fillna(0)
  tm=tm.reindex(sorted(tm.columns), axis=1)
  return (tm)

tm=create_tm(confirmed)
tm_d=create_tm(death)
tm_rec=create_tm(recover)

#Prediction and data visualization curves
import matplotlib.pyplot as plt
p=ts.reindex(ts.max().sort_values(ascending=False).index, axis=1)
p.iloc[:,:1].plot(marker='*',figsize=(10,4)).set_title('Daily Total Confirmed',fontdict={'fontsize': 22})
p.iloc[:,2:10].plot(marker='*',figsize=(10,4)).set_title('Daily Total Confirmed - Major areas',fontdict={'fontsize': 22})

p_d=ts_d.reindex(ts.mean().sort_values(ascending=False).index, axis=1)
p_d.iloc[:,:1].plot(marker='*',figsize=(10,4)).set_title('Daily Total Death ',fontdict={'fontsize': 22})
p_d.iloc[:,2:10].plot(marker='*',figsize=(10,4)).set_title('Daily Total Death - Major areas',fontdict={'fontsize': 22})

p_r=ts_rec.reindex(ts.mean().sort_values(ascending=False).index, axis=1)
p_r.iloc[:,:1].plot(marker='*',figsize=(10,4)).set_title('Daily Total Recoverd ',fontdict={'fontsize': 22})
p_r.iloc[:,2:10].plot(marker='*',figsize=(10,4)).set_title('Daily Total Recoverd - Major areas',fontdict={'fontsize': 22})

